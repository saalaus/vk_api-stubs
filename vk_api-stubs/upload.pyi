from typing import BinaryIO, Literal
from vk_api import VkApi
from vk_api.vk_api import VkApiMethod


class VkUpload:
    def __init__(self, vk: VkApi | VkApiMethod) -> None: ...

    def photo(self, photos: str | list[str] | BinaryIO | list[BinaryIO], album_id: str | int,
              latitude: float | int | None = None, longitude: float | int | None = None,
              caption: str | None = None, description: str | None = None,
              group_id: str | int | None = None) -> list[dict]: ...

    def photo_messages(self, photos: str | list[str] | BinaryIO |
                       list[BinaryIO], peer_id: int | None = None) -> list[dict]: ...

    def photo_group_widget(self, photo: str | BinaryIO, image_type: str) -> dict: ...

    def photo_profile(self, photo: str | BinaryIO, owner_id: str | int | None = None,
                      crop_x: int | None = None, crop_y: int | None = None,
                      crop_width: int | None = None) -> dict: ...

    def photo_chat(self, photo: str | BinaryIO, chat_id: int) -> dict: ...

    def photo_wall(self, photos: str | list[str] | BinaryIO | list[BinaryIO],
                   user_id: int | None = None, group_id: int | None = None, caption: str | None = None) -> list[dict]: ...

    def photo_market(self, photo: str | list[str] | BinaryIO |
                     list[BinaryIO], group_id: int, main_photo: bool = False,
                     crop_x: int | None = None, crop_y: int | None = None, crop_width: int | None = None) -> list[dict]: ...

    def photo_market_album(self, photo: str | list[str] | BinaryIO |
                           list[BinaryIO], group_id: int) -> list[dict]: ...

    def audio(self, audio: str | BinaryIO, artist: str, title: str) -> list[dict]: ...

    def video(self, video_file: str | BinaryIO | None = None, link: str | None = None, name: str | None = None, description: str | None = None,
              is_private: bool | None = None, wallpost: bool | None = None, group_id: int | None = None,
              album_id: int | None = None, privacy_view: list | None = None, privacy_comment: list | None = None,
              no_comments: bool | None = None, repeat: bool | None = None) -> dict: ...

    def document(self, doc: str | BinaryIO, title: str | None = None, tags: str | None = None,
                 group_id: int | None = None,
                 to_wall: bool = False, message_peer_id: int | None = None, doc_type: Literal["doc", "audio_message", "graffiti"] | None = None) -> list[dict]: ...

    def document_wall(self, doc: BinaryIO | str, title: str | None = None, tags: str |
                      None = None, group_id: int | None = None) -> list[dict]: ...

    def document_message(self, doc: BinaryIO | str, title: str | None = None, tags: str |
                         None = None, peer_id: int | None = None) -> list[dict]: ...

    def audio_message(self, audio: BinaryIO | str, peer_id: int | None = None,
                      group_id: int | None = None) -> list[dict]: ...

    def graffiti(self, image: BinaryIO | str, peer_id: int | None = None,
                 group_id: int | None = None) -> list[dict]: ...

    def photo_cover(self, photo: BinaryIO | str, group_id: int | None,
                    crop_x: int | None = None, crop_y: int | None = None,
                    crop_x2: int | None = None, crop_y2: int | None = None) -> list[dict]: ...

    def story(self, file: str | BinaryIO, file_type: Literal["photo", "video"], add_to_news: bool = True, user_ids: list[int] | None = None,
              reply_to_story: int | None = None, link_text: str | None = None,
              link_url: str | None = None, group_id: int | None = None): ...


class FilesOpener:
    def __init__(self, paths: str | list[str] | BinaryIO | list[BinaryIO], key_format: str = 'file{}') -> None: ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...
    def open_files(self): ...
    def close_files(self): ...
